{"version":3,"sources":["/client/js/components/QuizzerComponent.js"],"names":["window","FC","undefined","correct","incorrect","QuizzerComponent","state","currentCard","showFront","completedQuiz","setState","cb","set","shuffledCards","_","shuffle","cards","slice","UserData","getSet","props","params","setId","console","log","copiedState","Object","assign","card","correctCount","incrementCorrectCountOnCard","id","currentPosition","length","incorrectCount","incrementIncorrectCountOnCard","cardShower","cardNavigation","quizSummary","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","ReactRouter","browserHistory","goBack","reset","React","Component"],"mappings":"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","file":"QuizzerComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  var correct;\n  var incorrect\n\n  class QuizzerComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true,\n        completedQuiz: false\n      }\n    }\n\n    reset(){\n      correct = 0;\n      incorrect = 0;\n\n\n      this.setState({\n        currentCard: 0,\n        showFront:true,\n        completedQuiz:false\n      })\n\n    }\n\n    componentDidMount() {\n      correct = 0;\n      incorrect = 0;\n\n      var cb = (set) => {\n\n        // copy and shuffle array\n        var shuffledCards = _.shuffle(set.cards.slice(0));\n\n        this.setState({\n          cards: shuffledCards,\n          currentCard: 0,\n          showFront: true\n        });\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n    componentWillUnmount(){\n      correct = 0;\n      incorrect = 0;\n      console.log(this, 'componentDidUnmount')\n    }\n\n    cardClicked() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n\n      var card = this.state.cards[this.state.currentCard];\n      card.correctCount += 1;\n      correct ++;\n      FC.UserData.incrementCorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n        // ReactRouter.browserHistory.goBack();\n\n        this.setState({\n          completedQuiz:true,\n        });\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    markIncorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      card.incorrectCount += 1;\n      incorrect ++;\n      FC.UserData.incrementIncorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n\n        // ReactRouter.browserHistory.goBack();\n        this.setState({\n          completedQuiz:true,\n        });\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    render() {\n\n      var cardShower;\n      var cardNavigation;\n      var quizSummary;\n\n      if (this.state.cards !== undefined) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div\n            className=\"card\"\n            onClick={(evt) => { this.cardClicked(evt); }}>\n            {textToShow}</div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n        </div>;\n\n        if (this.state.completedQuiz){\n          cardNavigation = \"\";\n          cardShower = \"\";\n          quizSummary = <div className = \"quiz-summary\">\n            <h1>Quiz Complete</h1>\n            <h2>Correct: {correct} </h2>\n            <h2>Incorrect: {incorrect}</h2>\n            <div className='button quiz-done'\n            onClick={()=> {ReactRouter.browserHistory.goBack();}}>click to go back</div>\n            <div className='button quiz-done'\n            onClick={()=>{this.reset();}}>Again!</div>\n        </div>\n        }\n      }\n\n      return <div className=\"quizzer\">\n        The Quizzer\n\n        {cardShower}\n        {cardNavigation}\n        {quizSummary}\n      </div>\n    }\n\n  }\n\n  FC.QuizzerComponent = QuizzerComponent;\n\n})();\n"]}