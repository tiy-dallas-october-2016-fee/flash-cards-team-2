{"version":3,"sources":["components/QuizzerComponent.js"],"names":["window","FC","undefined","correct","incorrect","QuizzerComponent","state","currentCard","showFront","completedQuiz","cb","set","shuffledCards","_","shuffle","cards","slice","setState","UserData","getSet","props","params","setId","copiedState","Object","assign","card","correctCount","incrementCorrectCountOnCard","id","currentPosition","length","incorrectCount","incrementIncorrectCountOnCard","cardShower","cardNavigation","quizSummary","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","ReactRouter","browserHistory","goBack","React","Component"],"mappings":"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","file":"QuizzerComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  var correct;\n  var incorrect\n\n  class QuizzerComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true,\n        completedQuiz: false\n      }\n    }\n\n    componentDidMount() {\n      correct = 0;\n      incorrect = 0;\n\n      var cb = (set) => {\n\n        // copy and shuffle array\n        var shuffledCards = _.shuffle(set.cards.slice(0));\n\n        this.setState({\n          cards: shuffledCards,\n          currentCard: 0,\n          showFront: true\n        });\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n\n    cardClicked() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n\n      var card = this.state.cards[this.state.currentCard];\n      card.correctCount += 1;\n      correct ++;\n      FC.UserData.incrementCorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n        // ReactRouter.browserHistory.goBack();\n\n        this.setState({\n          completedQuiz:true,\n        });\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    markIncorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      card.incorrectCount += 1;\n      incorrect ++;\n      FC.UserData.incrementIncorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n\n        // ReactRouter.browserHistory.goBack();\n        this.setState({\n          completedQuiz:true,\n        });\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    render() {\n\n      var cardShower;\n      var cardNavigation;\n      var quizSummary;\n\n      if (this.state.cards !== undefined) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div\n            className=\"card\"\n            onClick={(evt) => { this.cardClicked(evt); }}>\n            {textToShow}</div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n        </div>;\n\n        if (this.state.completedQuiz){\n          cardNavigation = \"\";\n          cardShower = \"\";\n          quizSummary = <div className = \"quiz-summary\">\n            <h1>Quiz Complete</h1>\n            <h2>Correct: {correct} </h2>\n            <h2>Incorrect: {incorrect}</h2>\n            <div className='button quiz-done'\n            onClick={()=> {ReactRouter.browserHistory.goBack();}}>click to go back</div>\n        </div>\n        }\n      }\n\n      return <div className=\"quizzer\">\n        The Quizzer\n\n        {cardShower}\n        {cardNavigation}\n        {quizSummary}\n      </div>\n    }\n\n  }\n\n  FC.QuizzerComponent = QuizzerComponent;\n\n})();\n"]}